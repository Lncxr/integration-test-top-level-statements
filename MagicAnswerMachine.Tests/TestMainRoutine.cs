using Microsoft.Extensions.Configuration;
using MagicAnswerMachine.Client.Models;
using FluentAssertions;
using Xunit;
using Moq;

namespace MagicAnswerMachine.Tests
{
    public class TestMainRoutine
    {
        private IConfiguration m_config;

        // Set up our configuration source via test class' constructor
        public TestMainRoutine()
            => m_config = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", false, false)
                .AddEnvironmentVariables()
                .Build();

        [Fact]
        public void Should_ThrowExpectedException_When_SuppliedArgsEmptyOrNull()
        {
            // Given...
            var sut = typeof(Program).Assembly.EntryPoint!;

            // When...
            try
            {
                sut.Invoke(null, new object[] { Array.Empty<string>() });

                Assert.Fail("Failed to catch expected exception from Main()");
            }
            // Then...
            catch (Exception exception)
            {
                // We're invoking a method through reflection, so when our exception is thrown
                // it's passed to TargetInvocationException as a reference, we can grab it via
                // InnerException property or the GetBaseException() method as shown below
                exception.GetBaseException().Message.Should().Be("No args supplied!");

                Assert.Equal("No args supplied!",
                    exception.GetBaseException().Message);
            }
        }

        [Theory]
        [InlineData("MagicAnswerMachine, are you self-aware?")]
        public void Should_OutputExpectedTextToConsole_When_SuppliedWithArgs(string text)
        {
            // Given...
            var sut = typeof(Program).Assembly.EntryPoint!;

            var defaultOutput = Console.Out;

            using (var writer = new StringWriter())
            {
                Console.SetOut(writer);

                // When...
                try
                {
                    sut.Invoke(null, new object[] { new[] { text } });
                }
                catch (Exception exception)
                {
                    Assert.Fail($"Failed, Main() exception : {exception.GetBaseException().Message}");
                }
                // Then...
                finally
                {
                    var lines = writer.ToString().Split(Environment.NewLine,
                        StringSplitOptions.TrimEntries);

                    #region Manual debug logs
                    // You can use the following from the System.Diagnostics namespace
                    // to write any expected data (Console.Out) to your debug log
                    // 
                    // Debug.Print("Debug : {0}", lines[0]);
                    // Trace.WriteLine("Debug : {0}", lines[0]);
                    //
                    // And if we want to see MagicAnswerMachine's response...
                    // Trace.WriteLine("Debug : {0}", lines[1]);
                    #endregion

                    Assert.Equal(text, lines[0]);

                    Assert.Contains(text, writer.GetStringBuilder()
                        .ToString().Trim());

                    Assert.Matches(text, writer.GetStringBuilder()
                        .ToString().Trim());

                    writer.Flush();

                    Console.SetOut(defaultOutput);
                }
            }
        }

        [Fact]
        public void Should_ReturnExpectedValue_When_RandomAnswerMethodInvoked()
        {
            // Given...
            var dummyResponse = new Mock<IResponse>();

            var defaultOutput = Console.Out;

            var answers = m_config.GetSection("Answers")
                .Get<string[]>();

            dummyResponse.Setup(x => x.Answers)
                .Returns(answers);

            var dummyAnswer = dummyResponse.Object.Answers[0];

            var defaultAnswer = answers[0];

            dummyResponse.Setup(x => x.ReturnRandomAnswer())
                .Returns(dummyAnswer);

            // When...
            var answer = dummyResponse.Object.ReturnRandomAnswer();

            // Then...
            Assert.Equal(answer, dummyAnswer);

            Assert.Equal(dummyAnswer, defaultAnswer);

            Assert.Contains(answer, dummyAnswer);

            Assert.Matches(answer, dummyAnswer);

            Console.SetOut(defaultOutput);
        }
    }

    // The following test case is an example of how to test
    // an asynchronous Main() generated by your top-level statements
    //
    // [Theory]
    // [InlineData("MagicAnswerMachine, do you run asynchronously?")]
    // public async Task Should_BeAwaitable_When_MainRoutineRunsAsynchronously(string text)
    // {
    //    // Given...
    //    var sut = typeof(Program).Assembly.EntryPoint!;
    //
    //    // When...
    //    var obj = sut.Invoke(null, new object[] { new[] { text } })!;
    //
    //    // Then...
    //    if (obj is Task task)
    //        await task; // - or, await Assert.IsType<Task>(obj);
    //    else
    //        Assert.Fail($"Return object from Main() not Task<>, was actually : {obj.GetType()}");
    // }
}